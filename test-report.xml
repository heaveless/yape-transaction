<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/update/index.spec.ts">
    <testCase name="update handler should return 200 when update is successful" duration="2"/>
    <testCase name="update handler should return 400 when validation fails (invalid id)" duration="4"/>
    <testCase name="update handler should return 400 when validation fails (missing statusId)" duration="1"/>
    <testCase name="update handler should return 500 when dynamoDb.send throws" duration="1"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/update/schema.spec.ts">
    <testCase name="updateSchema should pass with valid input" duration="1"/>
    <testCase name="updateSchema should fail if id is not a UUID" duration="0"/>
    <testCase name="updateSchema should fail if statusId is missing" duration="0"/>
    <testCase name="updateSchema should fail if statusId is negative" duration="0"/>
    <testCase name="updateSchema should fail if statusId is not a number" duration="1"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/get-one/index.spec.ts">
    <testCase name="getOne handler should return 200 with item if found" duration="2"/>
    <testCase name="getOne handler should return 404 if item not found" duration="2"/>
    <testCase name="getOne handler should return 400 if id param is invalid" duration="0"/>
    <testCase name="getOne handler should return 500 if DynamoDB throws error" duration="1"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/get-many/index.spec.ts">
    <testCase name="getMany handler should return 200 with items and next cursor" duration="2"/>
    <testCase name="getMany handler should return 200 with empty items and next = 0" duration="0"/>
    <testCase name="getMany handler should return 400 if query is invalid (non-numeric limit)" duration="1"/>
    <testCase name="getMany handler should return 500 if dynamoDb throws an error" duration="1"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/create/index.spec.ts">
    <testCase name="create transaction handler should return 201 on successful transaction creation" duration="1"/>
    <testCase name="create transaction handler should return 400 if validation fails" duration="1"/>
    <testCase name="create transaction handler should return 500 if DynamoDB throws unexpectedly" duration="1"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/get-many/schama.spec.ts">
    <testCase name="getManySchema should pass with valid data" duration="0"/>
    <testCase name="getManySchema should fail if account is not a UUID" duration="1"/>
    <testCase name="getManySchema should fail if limit is not numeric" duration="0"/>
    <testCase name="getManySchema should fail if cursor is not numeric" duration="0"/>
    <testCase name="getManySchema should allow limit and cursor to be undefined (optional)" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/object-to-string.spec.ts">
    <testCase name="objectToString should stringify a simple object" duration="0"/>
    <testCase name="objectToString should stringify a nested object" duration="0"/>
    <testCase name="objectToString should throw when given a circular reference" duration="1"/>
    <testCase name="objectToString should stringify arrays as objects" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/types/http.spec.ts">
    <testCase name="validateApiKey middleware should block request with missing api key" duration="0"/>
    <testCase name="validateApiKey middleware should block request with invalid api key" duration="0"/>
    <testCase name="validateApiKey middleware should call next if api key is valid" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/validate.spec.ts">
    <testCase name="validate middleware should validate body successfully and call next" duration="1"/>
    <testCase name="validate middleware should throw BadRequestException on invalid body" duration="1"/>
    <testCase name="validate middleware should use executor to extract custom data and validate it" duration="0"/>
    <testCase name="validate middleware should throw if executor returns invalid data" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/format-error.spec.ts">
    <testCase name="formatError should format a single field error" duration="1"/>
    <testCase name="formatError should format multiple field errors separated by |" duration="0"/>
    <testCase name="formatError should handle nested errors with full paths" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/create/schame.spec.ts">
    <testCase name="createSchema should pass with valid input" duration="1"/>
    <testCase name="createSchema should fail if UUIDs are invalid" duration="0"/>
    <testCase name="createSchema should fail if typeId is not positive" duration="0"/>
    <testCase name="createSchema should fail if amount is not a number" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/string-to-object.spec.ts">
    <testCase name="stringToObject should parse a valid JSON string into an object" duration="0"/>
    <testCase name="stringToObject should throw an error if the JSON is invalid" duration="1"/>
    <testCase name="stringToObject should parse a JSON array string" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/exception.spec.ts">
    <testCase name="exception middleware should call next if no error is thrown" duration="0"/>
    <testCase name="exception middleware should catch errors and throw BaseException" duration="1"/>
    <testCase name="externalException should extract message and status from error object" duration="0"/>
    <testCase name="externalException should prefer error.status over metadata" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/create-handler.spec.ts">
    <testCase name="createHandler should handle request successfully and return formatted response" duration="1"/>
    <testCase name="createHandler should handle unexpected errors and return 500 response" duration="0"/>
    <testCase name="createHandler should handle BaseException and return proper status and message" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/get-one/schema.spec.ts">
    <testCase name="getOneSchema should pass with valid UUID" duration="1"/>
    <testCase name="getOneSchema should fail if id is not a UUID" duration="0"/>
    <testCase name="getOneSchema should fail if id is missing" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/functions/create/type.spec.ts">
    <testCase name="Status enum should have PENDING as 0" duration="1"/>
    <testCase name="Status enum should support reverse mapping from number to string" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/utils/compose.spec.ts">
    <testCase name="compose middleware should execute middlewares in order" duration="0"/>
    <testCase name="compose middleware should stop execution if middleware does not call next" duration="0"/>
    <testCase name="compose middleware should allow context mutation between middlewares" duration="0"/>
  </file>
  <file path="/Users/heaveless/Projects/yape/yape-transaction/test/shared/types/expection.spec.ts">
    <testCase name="Custom Exceptions should create a BaseException with correct message and status" duration="0"/>
    <testCase name="Custom Exceptions should create a BadRequestException with default values" duration="0"/>
    <testCase name="Custom Exceptions should create a BadRequestException with custom message and status" duration="0"/>
    <testCase name="Custom Exceptions should create a NotFoundException with default values" duration="0"/>
    <testCase name="Custom Exceptions should create a UnauthorizedException with default values" duration="0"/>
  </file>
</testExecutions>